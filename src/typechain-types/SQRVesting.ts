/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SQRVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PERCENT_DIVIDER"
      | "VERSION"
      | "allocations"
      | "calculateClaimAmount"
      | "calculateExcessAmount"
      | "calculateFinishDate"
      | "calculateMaxPeriod"
      | "calculateNextClaimAt"
      | "calculatePassedPeriod"
      | "calculateRemainAmount"
      | "calculatedRequiredAmount"
      | "canClaim"
      | "claim"
      | "cliffPeriod"
      | "erc20Token"
      | "fetchClaimInfo"
      | "firstUnlockPercent"
      | "getAllocationCount"
      | "getBalance"
      | "getTotalAllocated"
      | "isAllocationFinished"
      | "owner"
      | "renounceOwnership"
      | "setAllocation"
      | "setAllocations"
      | "startDate"
      | "transferOwnership"
      | "unlockPeriod"
      | "unlockPeriodPercent"
      | "withdrawExcessAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claim"
      | "OwnershipTransferred"
      | "SetAllocation"
      | "WithdrawExcessAmount"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PERCENT_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClaimAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExcessAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFinishDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNextClaimAt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePassedPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatedRequiredAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchClaimInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "firstUnlockPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllocationFinished",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocations",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPeriodPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENT_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExcessAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFinishDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNextClaimAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePassedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatedRequiredAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchClaimInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstUnlockPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllocationFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPeriodPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessAmount",
    data: BytesLike
  ): Result;
}

export namespace ClaimEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllocationEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawExcessAmountEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SQRVesting extends BaseContract {
  connect(runner?: ContractRunner | null): SQRVesting;
  waitForDeployment(): Promise<this>;

  interface: SQRVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PERCENT_DIVIDER: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  allocations: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        amount: bigint;
        claimed: bigint;
        claimedAt: bigint;
        exist: boolean;
      }
    ],
    "view"
  >;

  calculateClaimAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateExcessAmount: TypedContractMethod<[], [bigint], "view">;

  calculateFinishDate: TypedContractMethod<[], [bigint], "view">;

  calculateMaxPeriod: TypedContractMethod<[], [bigint], "view">;

  calculateNextClaimAt: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculatePassedPeriod: TypedContractMethod<[], [bigint], "view">;

  calculateRemainAmount: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    "view"
  >;

  calculatedRequiredAmount: TypedContractMethod<[], [bigint], "view">;

  canClaim: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  cliffPeriod: TypedContractMethod<[], [bigint], "view">;

  erc20Token: TypedContractMethod<[], [string], "view">;

  fetchClaimInfo: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {
        _amount: bigint;
        _claimed: bigint;
        _claimedAt: bigint;
        _exist: boolean;
        _canClaim: boolean;
        _available: bigint;
        _remain: bigint;
        _nextClaimAt: bigint;
      }
    ],
    "view"
  >;

  firstUnlockPercent: TypedContractMethod<[], [bigint], "view">;

  getAllocationCount: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getTotalAllocated: TypedContractMethod<[], [bigint], "view">;

  isAllocationFinished: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAllocation: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAllocations: TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  startDate: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockPeriod: TypedContractMethod<[], [bigint], "view">;

  unlockPeriodPercent: TypedContractMethod<[], [bigint], "view">;

  withdrawExcessAmount: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PERCENT_DIVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allocations"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        amount: bigint;
        claimed: bigint;
        claimedAt: bigint;
        exist: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateClaimAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateExcessAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFinishDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateMaxPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateNextClaimAt"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePassedPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainAmount"
  ): TypedContractMethod<[wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatedRequiredAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canClaim"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cliffPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fetchClaimInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {
        _amount: bigint;
        _claimed: bigint;
        _claimedAt: bigint;
        _exist: boolean;
        _canClaim: boolean;
        _available: bigint;
        _remain: bigint;
        _nextClaimAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "firstUnlockPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllocationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalAllocated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAllocationFinished"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAllocation"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllocations"
  ): TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unlockPeriodPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawExcessAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetAllocation"
  ): TypedContractEvent<
    SetAllocationEvent.InputTuple,
    SetAllocationEvent.OutputTuple,
    SetAllocationEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawExcessAmount"
  ): TypedContractEvent<
    WithdrawExcessAmountEvent.InputTuple,
    WithdrawExcessAmountEvent.OutputTuple,
    WithdrawExcessAmountEvent.OutputObject
  >;

  filters: {
    "Claim(address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetAllocation(address,uint256)": TypedContractEvent<
      SetAllocationEvent.InputTuple,
      SetAllocationEvent.OutputTuple,
      SetAllocationEvent.OutputObject
    >;
    SetAllocation: TypedContractEvent<
      SetAllocationEvent.InputTuple,
      SetAllocationEvent.OutputTuple,
      SetAllocationEvent.OutputObject
    >;

    "WithdrawExcessAmount(address,uint256)": TypedContractEvent<
      WithdrawExcessAmountEvent.InputTuple,
      WithdrawExcessAmountEvent.OutputTuple,
      WithdrawExcessAmountEvent.OutputObject
    >;
    WithdrawExcessAmount: TypedContractEvent<
      WithdrawExcessAmountEvent.InputTuple,
      WithdrawExcessAmountEvent.OutputTuple,
      WithdrawExcessAmountEvent.OutputObject
    >;
  };
}
