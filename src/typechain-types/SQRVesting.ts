/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SQRVesting {
  export type ContractParamsStruct = {
    newOwner: AddressLike;
    erc20Token: AddressLike;
    startDate: BigNumberish;
    cliffPeriod: BigNumberish;
    firstUnlockPercent: BigNumberish;
    unlockPeriod: BigNumberish;
    unlockPeriodPercent: BigNumberish;
    availableRefund: boolean;
    refundStartDate: BigNumberish;
    refundCloseDate: BigNumberish;
  };

  export type ContractParamsStructOutput = [
    newOwner: string,
    erc20Token: string,
    startDate: bigint,
    cliffPeriod: bigint,
    firstUnlockPercent: bigint,
    unlockPeriod: bigint,
    unlockPeriodPercent: bigint,
    availableRefund: boolean,
    refundStartDate: bigint,
    refundCloseDate: bigint
  ] & {
    newOwner: string;
    erc20Token: string;
    startDate: bigint;
    cliffPeriod: bigint;
    firstUnlockPercent: bigint;
    unlockPeriod: bigint;
    unlockPeriodPercent: bigint;
    availableRefund: boolean;
    refundStartDate: bigint;
    refundCloseDate: bigint;
  };

  export type ClaimInfoStruct = {
    amount: BigNumberish;
    canClaim: boolean;
    claimed: BigNumberish;
    claimCount: BigNumberish;
    claimedAt: BigNumberish;
    exist: boolean;
    available: BigNumberish;
    remain: BigNumberish;
    nextAvailable: BigNumberish;
    nextClaimAt: BigNumberish;
    canRefund: boolean;
    refunded: boolean;
  };

  export type ClaimInfoStructOutput = [
    amount: bigint,
    canClaim: boolean,
    claimed: bigint,
    claimCount: bigint,
    claimedAt: bigint,
    exist: boolean,
    available: bigint,
    remain: bigint,
    nextAvailable: bigint,
    nextClaimAt: bigint,
    canRefund: boolean,
    refunded: boolean
  ] & {
    amount: bigint;
    canClaim: boolean;
    claimed: bigint;
    claimCount: bigint;
    claimedAt: bigint;
    exist: boolean;
    available: bigint;
    remain: bigint;
    nextAvailable: bigint;
    nextClaimAt: bigint;
    canRefund: boolean;
    refunded: boolean;
  };
}

export interface SQRVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PERCENT_DIVIDER"
      | "VERSION"
      | "allocationCount"
      | "allocations"
      | "availableRefund"
      | "calculateClaimAmount"
      | "calculateClaimAt"
      | "calculateExcessAmount"
      | "calculateFinishDate"
      | "calculateMaxPeriod"
      | "calculatePassedPeriod"
      | "calculateRemainAmount"
      | "calculatedRequiredAmount"
      | "canClaim"
      | "canRefund"
      | "claim"
      | "cliffPeriod"
      | "erc20Token"
      | "fetchClaimInfo"
      | "firstUnlockPercent"
      | "forceWithdraw"
      | "getAccountByIndex"
      | "getAccountCount"
      | "getBalance"
      | "getContractName"
      | "getContractVersion"
      | "isAfterRefundCloseDate"
      | "isAllocationFinished"
      | "owner"
      | "refund"
      | "refundCloseDate"
      | "refundCount"
      | "refundStartDate"
      | "renounceOwnership"
      | "setAllocation"
      | "setAllocations"
      | "setAvailableRefund"
      | "setRefundCloseDate"
      | "setRefundStartDate"
      | "startDate"
      | "totalAllocated"
      | "totalClaimed"
      | "totalReserved"
      | "transferOwnership"
      | "unlockPeriod"
      | "unlockPeriodPercent"
      | "withdrawExcessAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claim"
      | "ForceWithdraw"
      | "OwnershipTransferred"
      | "Refund"
      | "SetAllocation"
      | "SetAvailableRefund"
      | "SetRefundCloseDate"
      | "SetRefundStartDate"
      | "WithdrawExcessAmount"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PERCENT_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "availableRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClaimAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClaimAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExcessAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFinishDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePassedPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatedRequiredAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canRefund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchClaimInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "firstUnlockPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAfterRefundCloseDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllocationFinished",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundCloseDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocations",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvailableRefund",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundCloseDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundStartDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPeriodPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENT_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClaimAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExcessAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFinishDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePassedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatedRequiredAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchClaimInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstUnlockPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAfterRefundCloseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllocationFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundCloseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAvailableRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundCloseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPeriodPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessAmount",
    data: BytesLike
  ): Result;
}

export namespace ClaimEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForceWithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllocationEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAvailableRefundEvent {
  export type InputTuple = [account: AddressLike, value: boolean];
  export type OutputTuple = [account: string, value: boolean];
  export interface OutputObject {
    account: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRefundCloseDateEvent {
  export type InputTuple = [account: AddressLike, value: BigNumberish];
  export type OutputTuple = [account: string, value: bigint];
  export interface OutputObject {
    account: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRefundStartDateEvent {
  export type InputTuple = [account: AddressLike, value: BigNumberish];
  export type OutputTuple = [account: string, value: bigint];
  export interface OutputObject {
    account: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawExcessAmountEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SQRVesting extends BaseContract {
  connect(runner?: ContractRunner | null): SQRVesting;
  waitForDeployment(): Promise<this>;

  interface: SQRVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PERCENT_DIVIDER: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  allocationCount: TypedContractMethod<[], [bigint], "view">;

  allocations: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        claimed: bigint;
        claimCount: bigint;
        claimedAt: bigint;
        exist: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;

  availableRefund: TypedContractMethod<[], [boolean], "view">;

  calculateClaimAmount: TypedContractMethod<
    [account: AddressLike, periodOffset: BigNumberish],
    [bigint],
    "view"
  >;

  calculateClaimAt: TypedContractMethod<
    [account: AddressLike, periodOffset: BigNumberish],
    [bigint],
    "view"
  >;

  calculateExcessAmount: TypedContractMethod<[], [bigint], "view">;

  calculateFinishDate: TypedContractMethod<[], [bigint], "view">;

  calculateMaxPeriod: TypedContractMethod<[], [bigint], "view">;

  calculatePassedPeriod: TypedContractMethod<[], [bigint], "view">;

  calculateRemainAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculatedRequiredAmount: TypedContractMethod<[], [bigint], "view">;

  canClaim: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  canRefund: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  cliffPeriod: TypedContractMethod<[], [bigint], "view">;

  erc20Token: TypedContractMethod<[], [string], "view">;

  fetchClaimInfo: TypedContractMethod<
    [account: AddressLike],
    [SQRVesting.ClaimInfoStructOutput],
    "view"
  >;

  firstUnlockPercent: TypedContractMethod<[], [bigint], "view">;

  forceWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAccountByIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getAccountCount: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getContractName: TypedContractMethod<[], [string], "view">;

  getContractVersion: TypedContractMethod<[], [string], "view">;

  isAfterRefundCloseDate: TypedContractMethod<[], [boolean], "view">;

  isAllocationFinished: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<[], [void], "nonpayable">;

  refundCloseDate: TypedContractMethod<[], [bigint], "view">;

  refundCount: TypedContractMethod<[], [bigint], "view">;

  refundStartDate: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAllocation: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAllocations: TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setAvailableRefund: TypedContractMethod<
    [value: boolean],
    [void],
    "nonpayable"
  >;

  setRefundCloseDate: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRefundStartDate: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  startDate: TypedContractMethod<[], [bigint], "view">;

  totalAllocated: TypedContractMethod<[], [bigint], "view">;

  totalClaimed: TypedContractMethod<[], [bigint], "view">;

  totalReserved: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockPeriod: TypedContractMethod<[], [bigint], "view">;

  unlockPeriodPercent: TypedContractMethod<[], [bigint], "view">;

  withdrawExcessAmount: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PERCENT_DIVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allocationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocations"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        claimed: bigint;
        claimCount: bigint;
        claimedAt: bigint;
        exist: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "availableRefund"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateClaimAmount"
  ): TypedContractMethod<
    [account: AddressLike, periodOffset: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateClaimAt"
  ): TypedContractMethod<
    [account: AddressLike, periodOffset: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateExcessAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFinishDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateMaxPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePassedPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatedRequiredAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canClaim"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canRefund"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cliffPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fetchClaimInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [SQRVesting.ClaimInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "firstUnlockPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountByIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAfterRefundCloseDate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAllocationFinished"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundCloseDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundStartDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAllocation"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllocations"
  ): TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAvailableRefund"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRefundCloseDate"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRefundStartDate"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAllocated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReserved"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unlockPeriodPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawExcessAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "ForceWithdraw"
  ): TypedContractEvent<
    ForceWithdrawEvent.InputTuple,
    ForceWithdrawEvent.OutputTuple,
    ForceWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "SetAllocation"
  ): TypedContractEvent<
    SetAllocationEvent.InputTuple,
    SetAllocationEvent.OutputTuple,
    SetAllocationEvent.OutputObject
  >;
  getEvent(
    key: "SetAvailableRefund"
  ): TypedContractEvent<
    SetAvailableRefundEvent.InputTuple,
    SetAvailableRefundEvent.OutputTuple,
    SetAvailableRefundEvent.OutputObject
  >;
  getEvent(
    key: "SetRefundCloseDate"
  ): TypedContractEvent<
    SetRefundCloseDateEvent.InputTuple,
    SetRefundCloseDateEvent.OutputTuple,
    SetRefundCloseDateEvent.OutputObject
  >;
  getEvent(
    key: "SetRefundStartDate"
  ): TypedContractEvent<
    SetRefundStartDateEvent.InputTuple,
    SetRefundStartDateEvent.OutputTuple,
    SetRefundStartDateEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawExcessAmount"
  ): TypedContractEvent<
    WithdrawExcessAmountEvent.InputTuple,
    WithdrawExcessAmountEvent.OutputTuple,
    WithdrawExcessAmountEvent.OutputObject
  >;

  filters: {
    "Claim(address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "ForceWithdraw(address,address,uint256)": TypedContractEvent<
      ForceWithdrawEvent.InputTuple,
      ForceWithdrawEvent.OutputTuple,
      ForceWithdrawEvent.OutputObject
    >;
    ForceWithdraw: TypedContractEvent<
      ForceWithdrawEvent.InputTuple,
      ForceWithdrawEvent.OutputTuple,
      ForceWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Refund(address)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "SetAllocation(address,uint256)": TypedContractEvent<
      SetAllocationEvent.InputTuple,
      SetAllocationEvent.OutputTuple,
      SetAllocationEvent.OutputObject
    >;
    SetAllocation: TypedContractEvent<
      SetAllocationEvent.InputTuple,
      SetAllocationEvent.OutputTuple,
      SetAllocationEvent.OutputObject
    >;

    "SetAvailableRefund(address,bool)": TypedContractEvent<
      SetAvailableRefundEvent.InputTuple,
      SetAvailableRefundEvent.OutputTuple,
      SetAvailableRefundEvent.OutputObject
    >;
    SetAvailableRefund: TypedContractEvent<
      SetAvailableRefundEvent.InputTuple,
      SetAvailableRefundEvent.OutputTuple,
      SetAvailableRefundEvent.OutputObject
    >;

    "SetRefundCloseDate(address,uint32)": TypedContractEvent<
      SetRefundCloseDateEvent.InputTuple,
      SetRefundCloseDateEvent.OutputTuple,
      SetRefundCloseDateEvent.OutputObject
    >;
    SetRefundCloseDate: TypedContractEvent<
      SetRefundCloseDateEvent.InputTuple,
      SetRefundCloseDateEvent.OutputTuple,
      SetRefundCloseDateEvent.OutputObject
    >;

    "SetRefundStartDate(address,uint32)": TypedContractEvent<
      SetRefundStartDateEvent.InputTuple,
      SetRefundStartDateEvent.OutputTuple,
      SetRefundStartDateEvent.OutputObject
    >;
    SetRefundStartDate: TypedContractEvent<
      SetRefundStartDateEvent.InputTuple,
      SetRefundStartDateEvent.OutputTuple,
      SetRefundStartDateEvent.OutputObject
    >;

    "WithdrawExcessAmount(address,uint256)": TypedContractEvent<
      WithdrawExcessAmountEvent.InputTuple,
      WithdrawExcessAmountEvent.OutputTuple,
      WithdrawExcessAmountEvent.OutputObject
    >;
    WithdrawExcessAmount: TypedContractEvent<
      WithdrawExcessAmountEvent.InputTuple,
      WithdrawExcessAmountEvent.OutputTuple,
      WithdrawExcessAmountEvent.OutputObject
    >;
  };
}
