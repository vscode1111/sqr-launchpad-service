/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SQRLaunchpad {
  export type StakeEntryStruct = {
    stakedAmount: BigNumberish;
    claimedAmount: BigNumberish;
    stakedAt: BigNumberish;
    claimedAt: BigNumberish;
    withdrawn: boolean;
  };

  export type StakeEntryStructOutput = [
    stakedAmount: bigint,
    claimedAmount: bigint,
    stakedAt: bigint,
    claimedAt: bigint,
    withdrawn: boolean
  ] & {
    stakedAmount: bigint;
    claimedAmount: bigint;
    stakedAt: bigint;
    claimedAt: bigint;
    withdrawn: boolean;
  };
}

export interface SQRLaunchpadInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APR_DIVIDER"
      | "VERSION"
      | "YEAR_PERIOD"
      | "apr"
      | "calculateCurrentRewardForUser"
      | "calculateExcessReward"
      | "calculateMaxRewardForUser"
      | "calculateRequiredReward"
      | "calculateReward"
      | "claim"
      | "depositDeadline"
      | "duration"
      | "erc20Token"
      | "fetchStakesForUser"
      | "getBalance"
      | "getStakeCount"
      | "getStakeCountForUser"
      | "getStakerCount"
      | "isStakeReady"
      | "limit"
      | "maxStakeAmount"
      | "minStakeAmount"
      | "owner"
      | "renounceOwnership"
      | "stake"
      | "totalClaimed"
      | "totalReservedReward"
      | "totalStaked"
      | "totalWithdrawn"
      | "transferOwnership"
      | "unstake"
      | "withdrawExcessReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claim"
      | "OwnershipTransferred"
      | "Stake"
      | "Unstake"
      | "WithdrawExcessReward"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APR_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "YEAR_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "apr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentRewardForUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExcessReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxRewardForUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequiredReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "depositDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchStakesForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeCountForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeReady",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "limit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReservedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessReward",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "APR_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YEAR_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentRewardForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExcessReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxRewardForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequiredReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchStakesForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeCountForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakeReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReservedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessReward",
    data: BytesLike
  ): Result;
}

export namespace ClaimEvent {
  export type InputTuple = [
    user: AddressLike,
    userStakeId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, userStakeId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    userStakeId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [
    user: AddressLike,
    userStakeId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, userStakeId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    userStakeId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [
    user: AddressLike,
    userStakeId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, userStakeId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    userStakeId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawExcessRewardEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SQRLaunchpad extends BaseContract {
  connect(runner?: ContractRunner | null): SQRLaunchpad;
  waitForDeployment(): Promise<this>;

  interface: SQRLaunchpadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APR_DIVIDER: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  YEAR_PERIOD: TypedContractMethod<[], [bigint], "view">;

  apr: TypedContractMethod<[], [bigint], "view">;

  calculateCurrentRewardForUser: TypedContractMethod<
    [user: AddressLike, userStakeId: BigNumberish],
    [bigint],
    "view"
  >;

  calculateExcessReward: TypedContractMethod<[], [bigint], "view">;

  calculateMaxRewardForUser: TypedContractMethod<
    [user: AddressLike, userStakeId: BigNumberish],
    [bigint],
    "view"
  >;

  calculateRequiredReward: TypedContractMethod<[], [bigint], "view">;

  calculateReward: TypedContractMethod<
    [_amount: BigNumberish, _apr: BigNumberish, _duration: BigNumberish],
    [bigint],
    "view"
  >;

  claim: TypedContractMethod<[userStakeId: BigNumberish], [void], "nonpayable">;

  depositDeadline: TypedContractMethod<[], [bigint], "view">;

  duration: TypedContractMethod<[], [bigint], "view">;

  erc20Token: TypedContractMethod<[], [string], "view">;

  fetchStakesForUser: TypedContractMethod<
    [user: AddressLike],
    [SQRLaunchpad.StakeEntryStructOutput[]],
    "view"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getStakeCount: TypedContractMethod<[], [bigint], "view">;

  getStakeCountForUser: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getStakerCount: TypedContractMethod<[], [bigint], "view">;

  isStakeReady: TypedContractMethod<[], [boolean], "view">;

  limit: TypedContractMethod<[], [bigint], "view">;

  maxStakeAmount: TypedContractMethod<[], [bigint], "view">;

  minStakeAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  totalClaimed: TypedContractMethod<[], [bigint], "view">;

  totalReservedReward: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalWithdrawn: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<
    [userStakeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawExcessReward: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APR_DIVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "YEAR_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "apr"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCurrentRewardForUser"
  ): TypedContractMethod<
    [user: AddressLike, userStakeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateExcessReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateMaxRewardForUser"
  ): TypedContractMethod<
    [user: AddressLike, userStakeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateRequiredReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateReward"
  ): TypedContractMethod<
    [_amount: BigNumberish, _apr: BigNumberish, _duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[userStakeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "duration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fetchStakesForUser"
  ): TypedContractMethod<
    [user: AddressLike],
    [SQRLaunchpad.StakeEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeCountForUser"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isStakeReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "limit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReservedReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[userStakeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawExcessReward"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawExcessReward"
  ): TypedContractEvent<
    WithdrawExcessRewardEvent.InputTuple,
    WithdrawExcessRewardEvent.OutputTuple,
    WithdrawExcessRewardEvent.OutputObject
  >;

  filters: {
    "Claim(address,uint32,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Stake(address,uint32,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Unstake(address,uint32,uint256)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;

    "WithdrawExcessReward(address,uint256)": TypedContractEvent<
      WithdrawExcessRewardEvent.InputTuple,
      WithdrawExcessRewardEvent.OutputTuple,
      WithdrawExcessRewardEvent.OutputObject
    >;
    WithdrawExcessReward: TypedContractEvent<
      WithdrawExcessRewardEvent.InputTuple,
      WithdrawExcessRewardEvent.OutputTuple,
      WithdrawExcessRewardEvent.OutputObject
    >;
  };
}
